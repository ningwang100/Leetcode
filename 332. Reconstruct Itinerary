public class Solution {
    public List<String> findItinerary(String[][] tickets) {
        LinkedList<String> result = new LinkedList<String>();
        HashMap<String, PriorityQueue<String>> graph = new HashMap<String, PriorityQueue<String>>();
        for (int i = 0; i < tickets.length; i++) {
            if (!graph.containsKey(tickets[i][0])) {
                PriorityQueue<String> q = new PriorityQueue<String>();
                q.offer(tickets[i][1]);
                graph.put(tickets[i][0], q);
            } else {
                graph.get(tickets[i][0]).offer(tickets[i][1]);
            }
        }
        search(result, "JFK", graph);
        return result;
    }
    
    private void search(LinkedList<String> result, String depature, HashMap<String, PriorityQueue<String>> graph) {
        if (graph.containsKey(depature)) {
            PriorityQueue<String> next = graph.get(depature);
            while (!next.isEmpty()) {
                search(result, next.poll(), graph);
            }
        }
        result.addFirst(depature);
    }
}
