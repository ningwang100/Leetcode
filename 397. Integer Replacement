Given a positive integer n and you can do operations as follow:

If n is even, replace n with n/2.
If n is odd, you can replace n with either n + 1 or n - 1.
What is the minimum number of replacements needed for n to become 1?

Example 1:

Input:
8

Output:
3

Explanation:
8 -> 4 -> 2 -> 1
Example 2:

Input:
7

Output:
4

Explanation:
7 -> 8 -> 4 -> 2 -> 1
or
7 -> 6 -> 3 -> 2 -> 1


Solution:
public class Solution {
    public int integerReplacement(int n) {
        HashMap<Integer, Integer> map = new HashMap();
        return minCount(map, n);
    }
    
    private int minCount(HashMap<Integer, Integer> map, int n) {
        if (n == 1) {
            return 0;
        }
        if (!map.containsKey(n)) {
            if ((n & 1) == 1) {
                map.put(n, 2 + Math.min(minCount(map, n / 2), minCount(map, n / 2 + 1)));
            } else {
                map.put(n, 1 + minCount(map, n / 2));
            }
        }
        return map.get(n);
    }
}
